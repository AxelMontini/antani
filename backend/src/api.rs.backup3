//! API using quick-xml and serde to serialize/deserialize

use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
struct OJP(OJPRequest);

#[derive(Serialize, Deserialize)]
struct OJPRequest(ServiceRequest);

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "PascalCase")]
struct ServiceRequest {
    request_timestamp: RequestTimestamp,
}

#[derive(Serialize, Deserialize, derive_more::From)]
struct RequestTimestamp(DateTime<Utc>);

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn deserialize() {
        let xml = r#"<OJP><OJPRequest><ServiceRequest><RequestTimestamp>2022-03-24T07:48:03.571299970Z</RequestTimestamp><a></a></ServiceRequest></OJPRequest></OJP>"#;//include_str!("./trip-request.xml");

        let ojp: OJP = quick_xml::de::from_str(xml).unwrap();
    }

    #[test]
    fn serialize() {
        let ojp = OJP(OJPRequest(ServiceRequest {
            request_timestamp: Utc::now().into(),
        }));

        println!("{}", quick_xml::se::to_string(&ojp).unwrap());
    }
}
