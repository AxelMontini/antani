use anyhow::Context;
use chrono::{DateTime, Utc};
use reqwest::Client;
use serde::Deserialize;
use sqlx::PgPool;
use warp::Rejection;

use crate::api::{ConnectionRequest, ConnectionResponse, CONNECTIONS};

#[derive(Deserialize, Debug)]
struct ConnectionsQuery {
    from: String,
    to: String,
    datetime: DateTime<Utc>,
    is_arrival_time: bool,
}

pub async fn connections(
    db: &PgPool,
    client: &Client,
    query: ConnectionsQuery,
) -> Result<impl warp::Reply, Rejection> {
    // We assume that bike=true since it's the website for bicycles

    let date = Some(query.datetime.format("%Y-%m-%d").to_string());
    let time = Some(query.datetime.format("%H-%M-%S").to_string());
    let req = ConnectionRequest {
        from: query.from,
        to: query.to,
        date,
        time,
        is_arrival_time: Some(query.is_arrival_time),
        bike: Some(true),
        ..Default::default()
    };

    let res = match client.get(CONNECTIONS).query(&req).send().await {
        Ok(r) => r,
        Err(e) => return Err(warp::reject::custom(e)),
    };

    let cr: ConnectionResponse = res.json().await.unwrap();

    // Try to sort connections based on bike places availability
    //let algorithm = |a| 1.0;

    Ok(warp::reply::json(&"Hello")) //TODO: Respond
}

// #[derive(Serialize, Debug)]
// struct Locations {}

// #[get("/locations?<query>&<ty>")]
// async fn locations(
//     client: &State<Client>,
//     query: &str,
//     ty: Option<&str>,
// ) -> Result<Json<Locations>, status::BadRequest<String>> {
//     let ty = ty
//         .map(|ty| {
//             let t = LocationRequestType::try_from(ty);
//             match t {
//                 Ok(t) => Ok(t),
//                 Err(e) => Err(status::BadRequest(Some(format!(
//                     "ty is not acceptable: {}",
//                     e
//                 )))),
//             }
//         })
//         .transpose();

//     let ty = match ty {
//         Ok(ty) => ty,
//         Err(e) => return Err(e),
//     };

//     let req = LocationRequest {
//         query: Some(query.into()),
//         ty,
//         ..Default::default()
//     };

//     client.get(LOCATIONS).query(&req);

//     Ok(Json(Locations {}))
// }

// #[derive(Serialize)]
// struct Stations {
//     stations: Vec<String>,
// }

// /// get all the station names starting with <start>: "Chi" -> ["Chiasso", ...]
// #[get("/stations?<start>")]
// async fn stations(db: &State<PgPool>, start: String) -> Json<Stations> {
//     let query = sqlx::query!(
//         r#"SELECT name FROM stations WHERE lower(name) LIKE lower($1 || '%')"#,
//         start
//     );

//     let response = query.fetch_all(db.deref()).await.unwrap(); //TODO: Handle error and do not PANIK!!
//     println!("{:?}", response);
//     let dio = Stations {
//         stations: response.iter().map(|e| return e.name.to_string()).collect(),
//     };

//     Json(dio)
// }

// #[derive(Deserialize, Debug)]
// struct Response {
//     records: Vec<Record>,
// }

// #[derive(Serialize)]
// struct Stops {
//     stops: Vec<String>,
// }

// impl Response {
//     pub fn get_stations(self) -> Vec<String> {
//         self.records
//             .iter()
//             .map(|e| e.fields.haltestellen_name.clone())
//             .collect()
//     }
// }

// #[derive(Deserialize, Debug)]
// struct Record {
//     pub fields: Fields,
// }

// #[derive(Deserialize, Debug)]
// struct Fields {
//     pub haltestellen_name: String,
// }

// /// get all the stops of train number <trainNr>: 324 -> ["Chiasso", ...]
// #[get("/stops?<trainNr>")]
// async fn stops(client: &State<Client>, db: &State<PgPool>, trainNr: i32) -> Json<Stops> {

//     let params = [
//         ("dataset", "ist-daten-sbb"),
//         ("q", &trainNr.to_string()),
//         ("sort", "ab_prognose"),
//     ];
//     let res = client
//         .get("https://data.sbb.ch/api/records/1.0/search/")
//         .query(&params)
//         .send()
//         .await.unwrap()
//         .json::<Response>()
//         .await.unwrap()
//         .get_stations();
//     Json(Stops {stops: res})
// }

// /// get abbreviation of <station>: "Zurich HB" -> "ZUE"
// #[get("/abbrev?<station>")]
// async fn abbrev(db: &State<PgPool>, station: String) -> String {
//     let query = sqlx::query!(r#"SELECT abbrev FROM stations WHERE name=$1 or locality=$1"#, station);
//     let response = query.fetch_one(db.deref()).await.unwrap();
//     response.abbrev.unwrap()
// }

// #[derive(Serialize)]
// struct Capacity {
//     date: NaiveDate,
//     trainNr: i32,
//     capacity: i32,
// }

// #[derive(derive_more::From, derive_more::Into, Serialize, Deserialize)]
// struct NaiveDateWrapper(NaiveDate);
// impl Deref for NaiveDateWrapper {
//     type Target = NaiveDate;

//     fn deref(&self) -> &Self::Target {
//         &self.0
//     }
// }

// impl FromFormField for NaiveDate {

// }

// #[get("/capacity?<date>&<trainNr>")]
// async fn capacity(db: &State<PgPool>, date: NaiveDate, trainNr: i32) -> Json<Capacity> {
//     let query = sqlx::query!(r#"SELECT max(capacity) FROM dataset WHERE connectionDate=$1 and trainNr=$2"#, date, trainNr);
//     let response = query.fetch_one(db.deref()).await.unwrap();
//     Json(Capacity {date, trainNr, capacity: response.max.unwrap()})
// }

// async fn occupancy(_client: &State<Client>, db: &State<PgPool>, trainNr: i32, date: String) -> anyhow::Result<()> {
//     let stops = stops(_client, db, trainNr).await;
//     let abbrevs = stops.stops.iter().map(|e| abbrev(db, e.to_string()));
//     let capacity

//     let capacity: Option<i32> = Some(0); // SELECT max(capacity) FROM dataset WHERE connectionDate=date and trainNr=trainNumber;
//     let stopsAmount = stops.len();
//     let occupancy = vec![0; stopsAmount - 1];
//     // O(n^2) btw sucami le palle frocio bastardo
//     // No u
//     // specchio riflesso buttati nel cesso + ratio + based
//     for i in 0..stopsAmount {
//         for j in (i + 1)..stopsAmount {
//             for ()
//             occupancy[]
//         }
//     }
//     Ok(())
// }

// struct Connections {

// }

// #[derive(derive_more::From, derive_more::Into, Serialize, Deserialize)]
// struct DateTimeUtc(DateTime<Utc>);

// impl Deref for DateTimeUtc {
//     type Target = DateTime<Utc>;

//     fn deref(&self) -> &Self::Target {
//         &self.0
//     }
// }

// impl<'f> FromFormField<'f> for DateTimeUtc {}

// struct ConnectionsQuery {
//     from: String, to: String, datetime: DateTimeUtc, is_arrival_time: bool
// }

// // Get connections for the given addresses
// #[get("/connections?<from>&<to>&<datetime>&<is_arrival_time>")]
// async fn connections(db: &State<PgPool>, client: &State<Client>, query: ConnectionsQuery) -> Json<Connections> {
//     // We assume that bike=true since it's the website for bicycles

//     let date = Some(datetime.format("%Y-%m-%d").to_string());
//     let time = Some(datetime.format("%H-%M-%S").to_string());
//     let req = ConnectionRequest { from, to, date, time, is_arrival_time, bike: true, ..Default::default() };

//     let res = client.get(CONNECTIONS).query(req).send().await.unwrap();
//     let cr: ConnectionResponse = res.json().await.unwrap();

//     // Try to sort connections based on bike places availability
//     let algorithm = |a| 1.0;

//     cr.
//     Json()
// }
